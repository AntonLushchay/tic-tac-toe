"use strict";(self.webpackChunktic_tac_toe=self.webpackChunktic_tac_toe||[]).push([[792],{215:(t,e,s)=>{t.exports=s.p+"assets/svg/sound.bf8d29d146a6c6ddae2d.svg"},377:(t,e,s)=>{t.exports=s.p+"assets/svg/settings.a0edd60c18d7b47639ee.svg"},697:(t,e,s)=>{s(917);const i=class{template;appRoot;buttons;controller;constructor(t,e){this.template='<div class="home"> <h1 class="home__title">Tic Tac Toe</h1> <nav class="home__menu"> <button class="home__menu-button button" id="1v1PlayButton" data-js-home-button> <span class="home__menu-button-text">Play 1 vs 1</span> </button> <button class="home__menu-button button" id="settingsButton" data-js-home-button> <span class="home__menu-button-text">Settings</span> </button> </nav> </div> ',this.appRoot=t,this.controller=e}render(){this.appRoot.innerHTML=this.template,this.bindEvents()}bindEvents(){this.buttons=this.appRoot.querySelectorAll("[data-js-home-button]"),this.buttons.forEach((t=>{t.addEventListener("click",this.handleButtonClick)}))}handleButtonClick=t=>{const e=t.currentTarget.id;this.controller.navigateTo(e)};cleanup(){this.buttons&&this.buttons.length>0&&this.buttons.forEach((t=>{t.removeEventListener("click",this.handleButtonClick)})),this.buttons=null,console.log("HomeView event listeners cleaned up.")}},n=class{view;hash;constructor(t){this.view=new i(t,this),this.hash="home"}show(){this.view.render()}navigateTo(t){switch(t){case"1v1PlayButton":window.location.hash="game";break;case"settingsButton":window.location.hash="settings";break;default:return void console.warn(`Unknown button clicked: ${t}`)}}cleanup(){this.view&&this.view.cleanup()}},a=class{board;turn;status="undefined";winner={name:null,winnerCells:[]};player1="x";player2="o";observers=[];settings={};constructor(){this.resetBoard()}subscribe(t){this.observers.push(t)}notifyUpdate(){const t=this.getState();this.observers.forEach((e=>e(t)))}getState(){return{board:[...this.board],turn:this.turn,status:this.status,winner:this.winner,settings:this.settings}}setSettings(t){this.settings=t}resetBoard(){this.board=Array(9).fill(null),this.turn=this.player1,this.winner={name:null,winnerCells:[]},this.changeStatus("undefined"),this.notifyUpdate()}setCell(t){null===this.board[t]&&(this.board[t]=this.turn,this.checkWin())}checkWin(){return this.isWin()?(this.changeStatus("finished"),void this.notifyUpdate()):this.isDraw()?(this.changeStatus("draw"),void this.notifyUpdate()):(this.changeStatus("active"),this.changeTurn(),void this.notifyUpdate())}changeTurn(){this.turn=this.turn===this.player1?this.player2:this.player1}changeStatus(t){this.status=t}isWin(){const t=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];for(const e of t){const[t,s,i]=e;if(this.board[t]&&this.board[t]===this.board[s]&&this.board[t]===this.board[i])return this.winner={name:this.turn,winnerCells:[t,s,i]},this.changeStatus("finished"),!0}}isDraw(){return this.board.every((t=>null!==t))}},o='<div class="game"> <h1 class="game__title">Game field</h1> <div class="game__current-player"> Current Player: <span class="game__current-player-name">X</span> </div> <button class="game__settings-button" id="settingsButton" data-js-game-button> <svg> <use class="game__settings-icon" href="'+new URL(s(377),s.b)+'#settings-icon"></use> </svg> </button> <div class="game__win-line" data-js-game-win-line></div> <div class="game__board"> <div class="game__cell" data-js-game-cell="0"></div> <div class="game__cell" data-js-game-cell="1"></div> <div class="game__cell" data-js-game-cell="2"></div> <div class="game__cell" data-js-game-cell="3"></div> <div class="game__cell" data-js-game-cell="4"></div> <div class="game__cell" data-js-game-cell="5"></div> <div class="game__cell" data-js-game-cell="6"></div> <div class="game__cell" data-js-game-cell="7"></div> <div class="game__cell" data-js-game-cell="8"></div> <div class="game__board-line game__board-line--v1" data-js-board-line="1"></div> <div class="game__board-line game__board-line--v2" data-js-board-line="2"></div> <div class="game__board-line game__board-line--h1" data-js-board-line="3"></div> <div class="game__board-line game__board-line--h2" data-js-board-line="4"></div> </div> <div class="game__button-container"> <button class="game__restart-button button" id="restartButton" data-js-game-button> Restart </button> <button class="game__back-button button" id="backButton" data-js-game-button> Back </button> </div> <dialog class="game__dialog dialog" data-js-game-dialog> <div class="dialog__content"> <p class="dialog__game-winner"> Player <span class="dialog__player-name" data-js-dialog-winner></span> has won! </p> <button class="dialog__close-button button" id="dialogCloseButton" data-js-game-button> Close </button> </div> </dialog> <svg> <defs> <filter id="pencil-sketch-filter"> <feturbulence type="fractalNoise" baseFrequency="0.03" numOctaves="3" result="noise"/> <fedisplacementmap in="SourceGraphic" in2="noise" scale="5" xChannelSelector="R" yChannelSelector="G"/> <fegaussianblur stdDeviation="0.5"/> <fecolormatrix type="matrix" values="1 0 0 0 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t 0 1 0 0 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t 0 0 1 0 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t 0 0 0 5 -2"/> </filter> </defs> </svg> </div> ',l=class{crossIcon='<svg class="cross-svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">\n\t<line id="cross-line1" x1="20" y1="20" x2="80" y2="80" stroke="currentcolor" stroke-width="8"\n\t\tstroke-linecap="round" />\n\t<line id="cross-line2" x1="80" y1="20" x2="20" y2="80" stroke="currentcolor" stroke-width="8"\n\t\tstroke-linecap="round" />\n</svg>';circleIcon='<svg class="circle-svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">\n\t<circle id="circle" cx="50" cy="50" r="40" fill="none" stroke="currentcolor" stroke-width="8" />\n</svg>';template=o;gameElem;appRoot;controller;buttons;cells=[];currentPlayerElem;winBoardLine;winnerElem;winnerDialogElem;dialogCloseButtonElem;status="undefined";isDraw=!1;constructor(t,e){this.appRoot=t,this.controller=e}render(t,e){console.log("state from model: ",t),"undefined"!==t.status&&"settings"!==e||(this.appRoot.innerHTML=this.template,this.findElements(),this.setListeners(),this.setBoardLines()),this.setViewState(t),this.setViewSettings(t.settings)}findElements(){this.gameElem=this.appRoot.querySelector(".game"),this.currentPlayerElem=this.appRoot.querySelector(".game__current-player-name"),this.cells=this.appRoot.querySelectorAll("[data-js-game-cell]"),this.buttons=this.appRoot.querySelectorAll("[data-js-game-button]"),this.winBoardLine=this.appRoot.querySelector("[data-js-game-win-line]"),this.winnerDialogElem=this.appRoot.querySelector("[data-js-game-dialog]"),this.winnerElem=this.winnerDialogElem.querySelector("[data-js-dialog-winner]"),this.dialogCloseButtonElem=this.winnerDialogElem.querySelector("#dialogCloseButton")}setListeners(){this.buttons.forEach((t=>{t.addEventListener("click",this.handleButtonClick)})),this.cells.forEach((t=>{t.addEventListener("click",this.handleCellClick)}))}setBoardLines(){const t=this.appRoot.querySelector(".game__board");for(let e=1;e<=4;e++)t.style.setProperty(`--random-angle-${e}`,`${Math.floor(11*Math.random())+-5}deg`)}handleButtonClick=t=>{const e=t.currentTarget.id;this.controller.buttonAction(e)};handleCellClick=t=>{if("finished"===this.status)return;const e=Number(t.currentTarget.dataset.jsGameCell);this.controller.makeMove(e)};setViewState(t){this.setStatus(t),this.setCells(t),this.setCurrentPlayer(t)}setViewSettings(t){console.log("settings in setViewSettings in GameView: ",t)}setStatus(t){this.status=t.status,"finished"===this.status?(this.showWinDialog(t.winner),this.drawWinLine(t.winner.winnerCells,t.winner.name)):"draw"===this.status&&this.showWinDialog(t.winner)}setCells(t){this.cells.forEach(((e,s)=>{e.innerHTML||("x"===t.board[s]?(e.innerHTML=this.crossIcon,this.setRandomCellTranslate(e)):"o"===t.board[s]&&(e.innerHTML=this.circleIcon,this.setRandomCellTranslate(e)))}))}setCurrentPlayer(t){"x"===t.turn?(this.currentPlayerElem.innerHTML=this.crossIcon,this.currentPlayerElem.style.setProperty("--color","red")):(this.currentPlayerElem.innerHTML=this.circleIcon,this.currentPlayerElem.style.setProperty("--color","blue"))}showWinDialog(t){if(this.updateWinDialog(t.name),"draw"===this.status)this.winnerDialogElem.showModal(),this.dialogCloseButtonElem.focus();else{const t=()=>{this.winnerDialogElem.showModal(),this.dialogCloseButtonElem.focus()};this.winBoardLine.addEventListener("animationend",t,{once:!0})}}hideDialog(){this.winnerDialogElem.close()}updateWinDialog(t){"finished"===this.status?"x"===t?(this.winnerDialogElem.style.setProperty("--background-color","rgb(251, 198, 198)"),this.winnerElem.innerHTML=this.crossIcon,this.winnerElem.style.setProperty("--color","red")):(this.winnerElem.innerHTML=this.circleIcon,this.winnerElem.style.setProperty("--color","blue"),this.winnerDialogElem.style.setProperty("--background-color","rgb(199, 199, 249)")):"draw"===this.status&&(this.winnerDialogElem.querySelector(".dialog__game-winner").textContent="DRAW!")}drawWinLine(t,e){const s=this.cells[t[0]].getBoundingClientRect(),i=this.cells[t[2]].getBoundingClientRect(),n={x1:s.x,y1:s.y+s.height/2,x2:i.x+i.width,y2:i.y+i.height/2},a={x1:s.x+s.width/2,y1:s.y,x2:i.x+i.width/2,y2:i.y+i.height},o={x1:s.x,y1:s.y,x2:i.x+i.width,y2:i.y+i.height},l={x1:s.x+s.width,y1:s.y,x2:i.x,y2:i.y+i.height},r={horizontal:s.y===i.y,vertical:s.x===i.x,diagonal1:i.x-s.x>0&&i.y-s.y>0,diagonal2:i.x-s.x<0&&i.y-s.y>0},h=Object.keys(r).find((t=>!0===r[t]));switch(h){case"horizontal":this.setWinLine(n,e);break;case"vertical":this.setWinLine(a,e);break;case"diagonal1":this.setWinLine(o,e);break;case"diagonal2":this.setWinLine(l,e);break;default:console.error("Unknown win type:",h)}}setWinLine(t,e){const s=t.x2-t.x1,i=t.y2-t.y1,n=Math.atan2(i,s)*(180/Math.PI),a=Math.sqrt(s*s+i*i),o="x"===e?"red":"blue";this.winBoardLine.style.setProperty("--left-indent",t.x1+"px"),this.winBoardLine.style.setProperty("--top-indent",t.y1+"px"),this.winBoardLine.style.setProperty("--line-length",a+"px"),this.winBoardLine.style.setProperty("--angle",n+"deg"),this.winBoardLine.style.setProperty("--color",o),this.winBoardLine.classList.add("game__win-line--active")}setRandomCellTranslate(t){t.querySelector("svg").style.transform=`translate(${30*Math.random()-15}px, ${30*Math.random()-15}px)`}cleanup(){this.buttons&&this.buttons.length>0&&this.buttons.forEach((t=>{t.removeEventListener("click",this.handleButtonClick)})),this.cells&&this.cells.length>0&&this.cells.forEach((t=>{t.removeEventListener("click",this.handleCellClick)})),this.buttons=null,this.cells=[],this.currentPlayerElem=null,this.winnerElem=null,this.winBoardLine=null,this.status="undefined",this.winnerDialogElem=null,this.dialogCloseButtonElem=null,console.log("GameView event listeners cleaned up.")}},r=class{model;view;hash;constructor(t){this.model=new a,this.view=new l(t,this),this.model.subscribe(this.handleModelUpdate),this.hash="game"}show(t){this.view.render(this.model.getState(),t)}handleModelUpdate=t=>{this.view.render(t)};setSettings(t){this.model.setSettings(t)}buttonAction(t){switch(t){case"restartButton":this.view.cleanup(),this.model.resetBoard();break;case"backButton":window.location.hash="home",this.model.resetBoard();break;case"dialogCloseButton":this.view.hideDialog();break;case"settingsButton":window.location.hash="settings";break;default:return void console.warn(`Unknown button clicked: ${t}`)}}makeMove(t){this.model.setCell(t)}cleanup(){this.view&&this.view.cleanup()}},h=class{constructor(){this.language="en",this.soundEnabled=!0,this.firstPlayer="X",this.theme="light",this.observers=[],this.loadSettings()}subscribe(t){this.observers.push(t)}notifyUpdate(){const t=this.getState();this.observers.forEach((e=>e(t)))}getState(){return{language:this.language,soundEnabled:this.soundEnabled,firstPlayer:this.firstPlayer,theme:this.theme}}loadSettings(){const t=localStorage.getItem("settings");if(t){const e=JSON.parse(t);this.language=e.language,this.soundEnabled=e.soundEnabled,this.firstPlayer=e.firstPlayer,this.theme=e.theme}}saveSettings(){localStorage.setItem("settings",JSON.stringify(this.getState()))}setLanguage(t){this.language=t,this.saveSettings(),this.notifyUpdate()}toggleSound(){this.soundEnabled=!this.soundEnabled,this.saveSettings(),this.notifyUpdate()}setFirstPlayer(t){this.firstPlayer=t,this.saveSettings(),this.notifyUpdate()}toggleTheme(){this.theme="light"===this.theme?"dark":"light",this.saveSettings(),this.notifyUpdate()}},c={en:{homePage:{title:"Tic Tac Toe",playButton:"Play 1 vs 1",settingsButton:"Settings"},settingsView:{title:"Settings",language:"Language",firstPlayer:"First player",backButton:"Back"},gameView:{title:"Game field",currentPlayer:"Current Player:",restartButton:"Restart",backButton:"Back",firstPartWinDialog:"Player ",secondPartWinDialog:"has won!",dialogCloseButton:"Close",drawDialog:"It/'s a draw!"}},es:{homePage:{title:"Tic Tac Toe",playButton:"Jugar 1 vs 1",settingsButton:"Configuración"},settingsView:{title:"Configuración",language:"Idioma",firstPlayer:"Primer jugador",backButton:"Atrás"},gameView:{title:"Campo de juego",currentPlayer:"Jugador actual:",restartButton:"Reiniciar",backButton:"Atrás",firstPartWinDialog:"¡El jugador ",secondPartWinDialog:" ha ganado!",dialogCloseButton:"Cerrar",drawDialog:"¡Es un empate!"}},ru:{homePage:{title:"Крестики-нолики",playButton:"Играть 1 против 1",settingsButton:"Настройки"},settingsView:{title:"Настройки",language:"Язык",firstPlayer:"Первый игрок",backButton:"Назад"},gameView:{title:"Игровое поле",currentPlayer:"Текущий игрок:",restartButton:"Перезапустить",backButton:"Назад",firstPartWinDialog:"Игрок ",secondPartWinDialog:" выиграл!",dialogCloseButton:"Закрыть",drawDialog:"Ничья!"}}},d='<div class="settings"> <h1 class="settings__title">Settings</h1> <nav class="settings__nav"> <ul> <li> <label class="settings__language-label" for="language-select">Language:</label> <select class="settings__select-language select" name="language" id="language-select" data-js-settings-language-select> <option class="settings__language-option" value="en"> English </option> <option class="settings__language-option" value="ru"> Русский </option> <option class="settings__language-option" value="es"> Español </option> </select> </li> <li> <label class="settings__player-label" for="first-player-select">First Player:</label> <select class="settings__select-player select" name="first-player" id="first-player-select" data-js-settings-first-player-select> <option value="X">X</option> <option value="0">O</option> </select> </li> <li> <button id="soundButton" data-js-settings-sound-toggle> <svg class="settings__icon"> <use href="'+new URL(s(215),s.b)+'"></use> </svg> </button> </li> <li> <label for="darkModeToggle">Dark Mode</label> <input type="checkbox" id="darkModeToggle" data-js-settings-dark-mode-toggle/> </li> </ul> </nav> <button class="settings__back-button button" id="backButton" data-js-settings-button> Back </button> </div> ',g=class{constructor(t,e){this.appRoot=t,this.controller=e,this.translation=c}render(){this.appRoot.innerHTML=d,this.findElements(),this.setEventListeners()}updateSettingsView(t){this.changeLanguage(t.language)}changeLanguage(t){this.buttons.forEach((e=>{e.textContent=this.translation[t].settingsView[e.id]})),this.title.textContent=this.translation[t].settingsView.title,this.selectLanguageLabel.textContent=this.translation[t].settingsView.language,this.selectPlayerLabel.textContent=this.translation[t].settingsView.firstPlayer}findElements(){this.title=this.appRoot.querySelector(".settings__title"),this.selectLanguageLabel=this.appRoot.querySelector(".settings__language-label"),this.selectPlayerLabel=this.appRoot.querySelector(".settings__player-label"),this.buttons=this.appRoot.querySelectorAll("[data-js-settings-button]"),this.languageSelect=this.appRoot.querySelector("[data-js-settings-language-select]"),this.soundToggle=this.appRoot.querySelector("[data-js-settings-sound-toggle]"),this.firstPlayerSelect=this.appRoot.querySelector("[data-js-settings-first-player-select]"),this.darkModeToggle=this.appRoot.querySelector("[data-js-settings-dark-mode-toggle]")}setEventListeners(){this.buttons.forEach((t=>{t.addEventListener("click",this.handleButtonClick)})),this.languageSelect.addEventListener("change",this.handleChangeLanguage),this.soundToggle.addEventListener("click",(()=>{this.controller.toggleSound()})),this.firstPlayerSelect.addEventListener("change",(t=>{this.controller.changeFirstPlayer(t.target.value)})),this.darkModeToggle.addEventListener("change",(t=>{this.controller.toggleDarkMode(t.target.checked)}))}handleButtonClick=t=>{const e=t.currentTarget.id;this.controller.buttonAction(e)};handleChangeLanguage=t=>{const e=t.target.value;console.log("lang: ",e),this.controller.changeLanguage(e)};cleanup(){this.appRoot.innerHTML=""}},u=class{constructor(t){this.model=new h,this.view=new g(t,this),this.hash="settings",this.observers=[],this.model.subscribe(this.handleModelUpdate)}subscribe(t){this.observers.push(t)}show(t){this.view.render(this.model.getState()),this.previousHash=t}handleModelUpdate=t=>{this.view.updateSettingsView(t),this.notifyAppController(t)};notifyAppController(t){this.observers.forEach((e=>e(t)))}buttonAction(t){"backButton"===t&&(window.location.hash=this.previousHash||"home")}changeLanguage(t){this.model.setLanguage(t)}cleanup(){this.view&&this.view.cleanup()}},p=class{appRoot;homeController;gameController;settingsController;currentController;newHash;previousHash;constructor(){if(this.appRoot=document.getElementById("app-root"),!this.appRoot)throw new Error("AppController Error: Root element #app-root not found.");this.settingsController=new u(this.appRoot),this.homeController=new n(this.appRoot),this.gameController=new r(this.appRoot),this.settingsController.subscribe(this.handleModelUpdate),window.addEventListener("hashchange",this.handleHashChange.bind(this)),this.handleHashChange()}handleModelUpdate=t=>{console.log("settings in App controller: ",t),this.gameController.setSettings(t)};handleHashChange(){let t;switch(this.previousHash=this.newHash||"home",this.newHash=window.location.hash.slice(1),this.currentController&&"function"==typeof this.currentController.cleanup&&"settings"!==this.newHash&&(this.currentController.cleanup(),console.log(`Cleaning up controller: ${this.currentController.constructor.name}`)),this.newHash){case"game":t=this.gameController;break;case"settings":t=this.settingsController;break;default:t=this.homeController}t&&t.show?(t.show(this.previousHash),this.currentController=t):console.warn(`AppController Error: No controller found for hash: ${this.newHash}. Defaulting to home view.`)}};document.addEventListener("DOMContentLoaded",(()=>{new p}))}},t=>{t.O(0,[869],(()=>t(t.s=697))),t.O()}]);