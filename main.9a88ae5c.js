"use strict";(self.webpackChunktic_tac_toe=self.webpackChunktic_tac_toe||[]).push([[792],{215:(t,e,s)=>{t.exports=s.p+"assets/svg/sound.bf8d29d146a6c6ddae2d.svg"},268:(t,e,s)=>{s(917);const i={en:{homePage:{title:"Tic Tac Toe",oneVsOnePlayButton:"Play 1 vs 1",oneVsAiPlayButton:"Play 1 vs AI",settingsButton:"Settings"},settingsView:{title:"Settings",language:"Language",firstPlayer:"First player",aiDifficulty:"AI Difficulty",aiDifficultyEasy:"Easy",aiDifficultyMedium:"Medium",aiDifficultyHard:"Hard",backButton:"Back"},gameView:{title:"Game field",currentPlayer:"Current Player:",aiThinking:"AI is thinking",restartButton:"Restart",backButton:"Back",dialogCloseButton:"Close",winner1stSpanElem:"Player ",winner3rdSpanElem:"has won!",drawDialog:"It's a draw!"}},es:{homePage:{title:"Tic Tac Toe",oneVsOnePlayButton:"Jugar 1 vs 1",oneVsAiPlayButton:"Jugar 1 vs IA",settingsButton:"Configuración"},settingsView:{title:"Configuración",language:"Idioma",firstPlayer:"Primer jugador",aiDifficulty:"Dificultad IA",aiDifficultyEasy:"Fácil",aiDifficultyMedium:"Medio",aiDifficultyHard:"Difícil",backButton:"Atrás"},gameView:{title:"Campo de juego",currentPlayer:"Jugador actual:",aiThinking:"La IA está pensando",restartButton:"Reiniciar",backButton:"Atrás",winner1stSpanElem:"¡El jugador",winner3rdSpanElem:"ha ganado!",dialogCloseButton:"Cerrar",drawDialog:"¡Es un empate!"}},ru:{homePage:{title:"Крестики-нолики",oneVsOnePlayButton:"Играть 1 на 1",oneVsAiPlayButton:"Играть 1 на ИИ",settingsButton:"Настройки"},settingsView:{title:"Настройки",language:"Язык",firstPlayer:"Первый игрок",aiDifficulty:"Сложность ИИ",aiDifficultyEasy:"Легкий",aiDifficultyMedium:"Средний",aiDifficultyHard:"Сложный",backButton:"Назад"},gameView:{title:"Игровое поле",currentPlayer:"Текущий игрок:",aiThinking:"ИИ думает",restartButton:"Перезапустить",backButton:"Назад",winner1stSpanElem:"Игрок ",winner3rdSpanElem:" выиграл!",dialogCloseButton:"Закрыть",drawDialog:"Ничья!"}}},n=class{translation=i;constructor(t,e){this.template=document.createElement("div"),this.template.classList.add("home"),this.template.innerHTML='<h1 class="home__title">Tic Tac Toe</h1> <nav class="home__menu"> <button class="home__menu-button button" id="oneVsOnePlayButton" data-js-home-button> <span class="home__menu-button-text">Play 1 vs 1</span> </button> <button class="home__menu-button button" id="oneVsAiPlayButton" data-js-home-button> <span class="home__menu-button-text">Play 1 vs AI</span> </button> <button class="home__menu-button button" id="settingsButton" data-js-home-button> <span class="home__menu-button-text">Settings</span> </button> </nav> ',this.appRoot=t,this.controller=e}render(t){this.appRoot.appendChild(this.template),this.bindEvents(),this.setSettings(t)}bindEvents(){this.buttons=this.template.querySelectorAll("[data-js-home-button]"),this.buttons.forEach((t=>{t.addEventListener("click",this.handleButtonClick)})),this.titleElem=this.template.querySelector(".home__title")}setSettings(t){this.changeLanguage(t.language)}changeLanguage(t){this.titleElem.textContent=this.translation[t].homePage.title,this.buttons.forEach((e=>{const s=e.id;e.textContent=this.translation[t].homePage[s]}))}handleButtonClick=t=>{const e=t.currentTarget.id;this.controller.navigateTo(e)};cleanup(){this.buttons&&this.buttons.length>0&&this.buttons.forEach((t=>{t.removeEventListener("click",this.handleButtonClick)})),this.buttons=null,console.log("HomeView event listeners cleaned up.")}},a=class{view;hash;settings={};constructor(t){this.view=new n(t,this),this.hash="home"}show(){this.view.render(this.settings)}setSettings(t){this.settings=t}navigateTo(t){switch(t){case"oneVsOnePlayButton":window.location.hash="game";break;case"oneVsAiPlayButton":window.location.hash="game?type=ai";break;case"settingsButton":window.location.hash="settings";break;default:return void console.warn(`Unknown button clicked: ${t}`)}}cleanup(){this.view&&this.view.cleanup()}},l=class{board;turn;status="undefined";winner={name:null,winnerCells:[]};gameType="player";player1="X";player2="O";observers=[];settings={};constructor(){this.resetBoard()}subscribe(t){this.observers.push(t)}notifyUpdate(){const t=this.getState();this.observers.forEach((e=>e(t)))}getState(){return{board:[...this.board],turn:this.turn,status:this.status,winner:this.winner,gameType:this.gameType,settings:this.settings}}setGameType(t){this.gameType=t}setSettings(t){this.settings=t,"active"!==this.status&&(this.turn=t.firstPlayer)}resetBoard(){this.board=Array(9).fill(null),this.winner={name:null,winnerCells:[]},this.turn=this.settings.firstPlayer||"X",this.changeStatus("undefined"),this.notifyUpdate()}resetState(){this.board=Array(9).fill(null),this.winner={name:null,winnerCells:[]},this.turn=this.settings.firstPlayer||"X",this.changeStatus("undefined")}setCell(t){null===this.board[t]&&(this.board[t]=this.turn,this.checkWin())}checkWin(){return this.isWin()?(this.changeStatus("finished"),void this.notifyUpdate()):this.isDraw()?(this.changeStatus("draw"),void this.notifyUpdate()):(this.changeStatus("active"),this.changeTurn(),void this.notifyUpdate())}changeTurn(){this.turn=this.turn===this.player1?this.player2:this.player1}changeStatus(t){this.status=t}isWin(){const t=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];for(const e of t){const[t,s,i]=e;if(this.board[t]&&this.board[t]===this.board[s]&&this.board[t]===this.board[i])return this.winner={name:this.turn,winnerCells:[t,s,i]},this.changeStatus("finished"),!0}}isDraw(){return this.board.every((t=>null!==t))}},o=s.p+"assets/sound/cross.161eddda1eb9d82b8bfa.m4a",r=s.p+"assets/sound/circle.3a705bc36915e92cd83c.m4a",h=s.p+"assets/sound/line.a52693bd31c097a5db41.m4a",c='<div class="game"> <h1 class="game__title">Game field</h1> <div class="game__current-player"> <span class="game__current-player-label">Current Player:</span> <span class="game__current-player-name">X</span> </div> <div class="game__ai-thinking" data-js-game-ai-thinking>AI is thinking</div> <button class="game__settings-button" id="settingsButton" data-js-game-button> <svg> <use class="game__settings-icon" href="'+new URL(s(377),s.b)+'#settings-icon"></use> </svg> </button> <div class="game__win-line" data-js-game-win-line></div> <div class="game__board"> <div class="game__cell" data-js-game-cell="0"></div> <div class="game__cell" data-js-game-cell="1"></div> <div class="game__cell" data-js-game-cell="2"></div> <div class="game__cell" data-js-game-cell="3"></div> <div class="game__cell" data-js-game-cell="4"></div> <div class="game__cell" data-js-game-cell="5"></div> <div class="game__cell" data-js-game-cell="6"></div> <div class="game__cell" data-js-game-cell="7"></div> <div class="game__cell" data-js-game-cell="8"></div> <div class="game__board-line game__board-line--v1" data-js-board-line="1"></div> <div class="game__board-line game__board-line--v2" data-js-board-line="2"></div> <div class="game__board-line game__board-line--h1" data-js-board-line="3"></div> <div class="game__board-line game__board-line--h2" data-js-board-line="4"></div> </div> <div class="game__button-container"> <button class="game__restart-button button" id="restartButton" data-js-game-button> Restart </button> <button class="game__back-button button" id="backButton" data-js-game-button> Back </button> </div> <dialog class="game__dialog dialog" data-js-game-dialog> <div class="dialog__content"> <p class="dialog__game-winner"> <span class="dialog__game-winner--1st-span">Player</span> <span class="dialog__game-winner--2nd-span" data-js-dialog-winner></span> <span class="dialog__game-winner--3rd-span">has won!</span> </p> <button class="dialog__close-button button" id="dialogCloseButton" data-js-game-button> Close </button> </div> </dialog> <svg> <defs> <filter id="pencil-sketch-filter"> <feturbulence type="fractalNoise" baseFrequency="0.03" numOctaves="3" result="noise"/> <fedisplacementmap in="SourceGraphic" in2="noise" scale="5" xChannelSelector="R" yChannelSelector="G"/> <fegaussianblur stdDeviation="0.5"/> <fecolormatrix type="matrix" values="1 0 0 0 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t 0 1 0 0 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t 0 0 1 0 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t 0 0 0 5 -2"/> </filter> </defs> </svg> </div> ',u=class{crossIcon='<svg class="cross-svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">\n\t<line id="cross-line1" x1="20" y1="20" x2="80" y2="80" stroke="currentcolor" stroke-width="8"\n\t\tstroke-linecap="round" />\n\t<line id="cross-line2" x1="80" y1="20" x2="20" y2="80" stroke="currentcolor" stroke-width="8"\n\t\tstroke-linecap="round" />\n</svg>';circleIcon='<svg class="circle-svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">\n\t<circle id="circle" cx="50" cy="50" r="40" fill="none" stroke="currentcolor" stroke-width="8" />\n</svg>';template=c;gameElem;appRoot;controller;buttons;cells=[];currentPlayerSignElem;winBoardLine;winner2ndSpanElem;winnerDialogElem;dialogCloseButtonElem;status="undefined";isDraw=!1;language="en";constructor(t,e){this.appRoot=t,this.controller=e}render(t,e){console.log("GameView. State from GameModel: ",t),"undefined"!==t.status&&"settings"!==e||(this.appRoot.innerHTML=this.template,this.findElements(),this.setListeners(),this.setBoardLines()),this.setViewState(t)}findElements(){this.gameElem=this.appRoot.querySelector(".game"),this.titleElem=this.appRoot.querySelector(".game__title"),this.currentPlayerLabelElem=this.appRoot.querySelector(".game__current-player-label"),this.currentPlayerSignElem=this.appRoot.querySelector(".game__current-player-name"),this.aiThinkingElem=this.appRoot.querySelector("[data-js-game-ai-thinking]"),this.cells=this.appRoot.querySelectorAll("[data-js-game-cell]"),this.buttons=this.appRoot.querySelectorAll("[data-js-game-button]"),this.winBoardLine=this.appRoot.querySelector("[data-js-game-win-line]"),this.winnerDialogElem=this.appRoot.querySelector("[data-js-game-dialog]"),this.winnerSpanContainer=this.winnerDialogElem.querySelector(".dialog__game-winner"),this.winner1stSpanElem=this.winnerDialogElem.querySelector(".dialog__game-winner--1st-span"),this.winner2ndSpanElem=this.winnerDialogElem.querySelector(".dialog__game-winner--2nd-span"),this.winner3rdSpanElem=this.winnerDialogElem.querySelector(".dialog__game-winner--3rd-span"),this.dialogCloseButtonElem=this.winnerDialogElem.querySelector("#dialogCloseButton")}setListeners(){this.buttons.forEach((t=>{t.addEventListener("click",this.handleButtonClick)})),this.cells.forEach((t=>{t.addEventListener("click",this.handleCellClick)}))}setBoardLines(){const t=this.appRoot.querySelector(".game__board");t.querySelectorAll("[data-js-board-line]").forEach((t=>{t.addEventListener("animationstart",this.handleAnimatedSound,{once:!0})}));for(let e=1;e<=4;e++)t.style.setProperty(`--random-angle-${e}`,`${Math.floor(11*Math.random())+-5}deg`)}playSound(t){if(!this.soundOn)return;let e;switch(t){case"cross":e=new Audio(o),e.currentTime=.3;break;case"circle":e=new Audio(r),e.currentTime=.6;break;case"line":e=new Audio(h),e.currentTime=.3;break;default:return}e.play().catch((t=>{console.warn("Error playing sound:",t)}))}handleAnimatedSound=t=>{t.target.className.includes("line")&&this.playSound("line")};handleButtonClick=t=>{const e=t.currentTarget.id;this.controller.buttonAction(e)};handleCellClick=t=>{if("finished"===this.status)return;const e=Number(t.currentTarget.dataset.jsGameCell);this.controller.makeMove(e)};setViewState(t){this.changeLanguage(t.settings.language),this.changeSound(t.settings.soundEnabled),this.setStatus(t),this.setCells(t),this.setCurrentPlayer(t.turn)}changeLanguage(t){this.language=t,this.buttons.forEach((e=>{"settingsButton"!==e.id&&(e.textContent=i[t].gameView[e.id])})),this.titleElem.textContent=i[t].gameView.title,this.currentPlayerLabelElem.textContent=i[t].gameView.currentPlayer,this.aiThinkingElem.textContent=i[t].gameView.aiThinking,this.winner1stSpanElem.textContent=i[t].gameView.winner1stSpanElem,this.winner3rdSpanElem.textContent=i[t].gameView.winner3rdSpanElem}changeSound(t){this.soundOn=t}setStatus(t){this.status=t.status,"finished"===this.status?(this.showWinDialog(t.winner),setTimeout((()=>{this.drawWinLine(t.winner.winnerCells,t.winner.name),this.playSound("line")}),1e3)):"draw"===this.status&&this.showWinDialog(t.winner)}setCells(t){this.cells.forEach(((e,s)=>{e.innerHTML||("X"===t.board[s]?(e.innerHTML=this.crossIcon,this.setRandomCellTranslate(e),this.playSound("cross")):"O"===t.board[s]&&(e.innerHTML=this.circleIcon,this.setRandomCellTranslate(e),this.playSound("circle")))}))}setCurrentPlayer(t){"X"===t?(this.currentPlayerSignElem.innerHTML=this.crossIcon,this.currentPlayerSignElem.style.setProperty("--color","red")):(this.currentPlayerSignElem.innerHTML=this.circleIcon,this.currentPlayerSignElem.style.setProperty("--color","blue"))}showAiThinking(){this.aiThinkingElem.classList.toggle("game__ai-thinking--active")}showWinDialog(t){if(this.updateWinDialog(t.name),"draw"===this.status)this.winnerDialogElem.showModal(),this.dialogCloseButtonElem.focus();else{const t=()=>{this.winnerDialogElem.showModal(),this.dialogCloseButtonElem.focus()};this.winBoardLine.addEventListener("animationend",t,{once:!0})}}hideDialog(){this.winnerDialogElem.close()}updateWinDialog(t){"finished"===this.status?"X"===t?(this.winnerDialogElem.style.setProperty("--background-color","rgb(251, 198, 198)"),this.winner2ndSpanElem.innerHTML=this.crossIcon,this.winner2ndSpanElem.style.setProperty("--color","red")):(this.winner2ndSpanElem.innerHTML=this.circleIcon,this.winner2ndSpanElem.style.setProperty("--color","blue"),this.winnerDialogElem.style.setProperty("--background-color","rgb(199, 199, 249)")):"draw"===this.status&&(this.winnerSpanContainer.textContent=i[this.language].gameView.drawDialog)}drawWinLine(t,e){const s=this.cells[t[0]].getBoundingClientRect(),i=this.cells[t[2]].getBoundingClientRect(),n=this.gameElem.getBoundingClientRect(),a={x1:s.x-n.x,y1:s.y-n.y+s.height/2,x2:i.x-n.x+i.width,y2:i.y-n.y+i.height/2},l={x1:s.x-n.x+s.width/2,y1:s.y-n.y,x2:i.x-n.x+i.width/2,y2:i.y-n.y+i.height},o={x1:s.x-n.x,y1:s.y-n.y,x2:i.x-n.x+i.width,y2:i.y-n.y+i.height},r={x1:s.x-n.x+s.width,y1:s.y-n.y,x2:i.x-n.x,y2:i.y-n.y+i.height},h={horizontal:s.y===i.y,vertical:s.x===i.x,diagonal1:i.x-s.x>0&&i.y-s.y>0,diagonal2:i.x-s.x<0&&i.y-s.y>0},c=Object.keys(h).find((t=>!0===h[t]));switch(c){case"horizontal":this.setWinLine(a,e);break;case"vertical":this.setWinLine(l,e);break;case"diagonal1":this.setWinLine(o,e);break;case"diagonal2":this.setWinLine(r,e);break;default:console.error("Unknown win type:",c)}}setWinLine(t,e){const s=t.x2-t.x1,i=t.y2-t.y1,n=Math.atan2(i,s)*(180/Math.PI),a=Math.sqrt(s*s+i*i),l="X"===e?"red":"blue";this.winBoardLine.style.setProperty("--left-indent",t.x1+"px"),this.winBoardLine.style.setProperty("--top-indent",t.y1+"px"),this.winBoardLine.style.setProperty("--line-length",a+"px"),this.winBoardLine.style.setProperty("--angle",n+"deg"),this.winBoardLine.style.setProperty("--color",l),this.winBoardLine.classList.add("game__win-line--active")}setRandomCellTranslate(t){t.querySelector("svg").style.transform=`translate(${30*Math.random()-15}px, ${30*Math.random()-15}px)`}cleanup(){this.buttons&&this.buttons.length>0&&this.buttons.forEach((t=>{t.removeEventListener("click",this.handleButtonClick)})),this.cells&&this.cells.length>0&&this.cells.forEach((t=>{t.removeEventListener("click",this.handleCellClick)})),this.buttons=null,this.cells=[],this.currentPlayerSignElem=null,this.winner2ndSpanElem=null,this.winBoardLine=null,this.status="undefined",this.winnerDialogElem=null,this.dialogCloseButtonElem=null,this.appRoot.innerHTML="",console.log("GameView event listeners cleaned up.")}},d=class{model;view;hash;constructor(t){this.model=new l,this.view=new u(t,this),this.model.subscribe(this.handleModelUpdate),this.hash="game"}show(t,e){this.model.setGameType(e),this.view.render(this.model.getState(),t)}handleModelUpdate=async t=>{this.view.render(t),"ai"===t.gameType&&"O"===t.turn&&null===t.winner.name&&(this.view.showAiThinking(),await this.makeAiMove(t.board,t.settings.aiDifficulty),this.view.showAiThinking())};setSettings(t){this.model.setSettings(t)}buttonAction(t){switch(t){case"restartButton":this.view.cleanup(),this.model.resetBoard();break;case"backButton":window.location.hash="home",this.model.resetState();break;case"dialogCloseButton":this.view.hideDialog();break;case"settingsButton":window.location.hash="settings";break;default:return void console.warn(`Unknown button clicked: ${t}`)}}makeMove(t){this.model.setCell(t)}async makeAiMove(t,e){const s=await async function(t,e){let s,i;"easy"===e?(s="gemini-2.5-flash-lite-preview-06-17",i=2):"medium"===e?(s="gemini-2.5-flash",i=1):"hard"===e&&(s="gemini-2.5-pro",i=.5);const n="MISSING_ENV_VAR".GEMINI_API_KEY,a=`You are playing tic-tac-toe as 'O'.\n\t\tBoard state (positions 0-8): ${t.map(((t,e)=>`${e}:${t||"empty"}`)).join(", ")}\n\t\tReturn only the position number (0-8) for your move. You must choose a valid position that is empty.`;console.log(`AI Model: ${s}`);try{const e=await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${s}:generateContent`,{method:"POST",headers:{"x-goog-api-key":n,"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:a}]}],generationConfig:{temperature:i}})}),l=(await e.json()).candidates[0].content.parts[0].text,o=parseInt(l,10);if(null!==t[o]){console.warn("AI returned an invalid move. Choosing a random empty cell.");const e=t.map(((t,e)=>null===t?e:null)).filter((t=>null!==t));if(e.length>0)return e[Math.floor(Math.random()*e.length)]}return o}catch(e){console.error("Error during AI move:",e),console.warn("AI returned an invalid move. Choosing a random empty cell.");const s=t.map(((t,e)=>null===t?e:null)).filter((t=>null!==t));if(s.length>0)return s[Math.floor(Math.random()*s.length)]}}(t,e);console.log(`AI chose cell: ${s}`),this.model.setCell(s)}cleanup(){this.view&&this.view.cleanup()}},g=class{constructor(){this.language="en",this.firstPlayer="X",this.soundEnabled=!0,this.aiDifficulty="easy",this.observers=[],this.loadSettings()}subscribe(t){this.observers.push(t)}notifyUpdate(){const t=this.getState();this.observers.forEach((e=>e(t)))}getState(){return{language:this.language,firstPlayer:this.firstPlayer,aiDifficulty:this.aiDifficulty,soundEnabled:this.soundEnabled}}loadSettings(){const t=localStorage.getItem("settings");if(t){const e=JSON.parse(t);this.language=e.language,this.firstPlayer=e.firstPlayer,this.aiDifficulty=e.aiDifficulty,this.soundEnabled=e.soundEnabled}}saveSettings(){localStorage.setItem("settings",JSON.stringify(this.getState()))}setLanguage(t){this.language=t,this.saveSettings(),this.notifyUpdate()}setFirstPlayer(t){this.firstPlayer=t,this.saveSettings(),this.notifyUpdate()}setAiDifficulty(t){this.aiDifficulty=t,this.saveSettings(),this.notifyUpdate()}toggleSound(){this.soundEnabled=!this.soundEnabled,this.saveSettings(),this.notifyUpdate()}},m='<div class="settings"> <h1 class="settings__title">Settings</h1> <nav class="settings__nav"> <ul> <li> <label class="settings__language-label" for="language-select">Language:</label> <select class="settings__select-language" name="language" id="language-select" data-js-settings-language-select> <option class="settings__language-option" value="en"> English </option> <option class="settings__language-option" value="ru"> Русский </option> <option class="settings__language-option" value="es"> Español </option> </select> </li> <li> <label class="settings__player-label" for="first-player-select">First Player:</label> <select class="settings__select-player" name="first-player" id="first-player-select" data-js-settings-first-player-select> <option value="X">X</option> <option value="O">O</option> </select> </li> <li> <label class="settings__ai-difficulty-label" for="ai-difficulty-select">AI Difficulty:</label> <select class="settings__select-ai-difficulty" name="ai-difficulty" id="ai-difficulty-select" data-js-settings-ai-difficulty-select> <option value="easy">Easy</option> <option value="medium">Medium</option> <option value="hard">Hard</option> </select> </li> <li> <button class="settings__sound-button" id="soundButton" data-js-settings-sound-toggle> <svg class="settings__icon"> <use href="'+new URL(s(215),s.b)+'"></use> </svg> </button> </li> </ul> </nav> <button class="settings__back-button button" id="backButton" data-js-settings-button> Back </button> </div> ',p=class{constructor(t,e){this.appRoot=t,this.controller=e,this.translation=i,this.updatedTamplate}render(t){this.appRoot.innerHTML=this.updatedTamplate?this.updatedTamplate:m,this.findElements(),this.setEventListeners(),this.updateSettingsView(t)}updateSettingsView(t){this.changeLanguage(t.language),this.changeFirstPlayer(t.firstPlayer),this.changeAiDifficulty(t.aiDifficulty),this.changeSound(t.soundEnabled)}changeLanguage(t){this.buttons.forEach((e=>{e.textContent=this.translation[t].settingsView[e.id]})),this.title.textContent=this.translation[t].settingsView.title,this.selectLanguageLabel.textContent=this.translation[t].settingsView.language,this.selectPlayerLabel.textContent=this.translation[t].settingsView.firstPlayer,this.aiDifficultySelectLabel.textContent=this.translation[t].settingsView.aiDifficulty,this.aiDifficultySelect.querySelector('[value="easy"]').textContent=this.translation[t].settingsView.aiDifficultyEasy,this.aiDifficultySelect.querySelector('[value="medium"]').textContent=this.translation[t].settingsView.aiDifficultyMedium,this.aiDifficultySelect.querySelector('[value="hard"]').textContent=this.translation[t].settingsView.aiDifficultyHard,this.languageSelect.value=t,this.updatedTamplate=this.appRoot.innerHTML}changeFirstPlayer(t){this.firstPlayerSelect.value=t}changeAiDifficulty(t){this.aiDifficultySelect.value=t}changeSound(t){t?this.soundToggle.classList.remove("settings__sound-button--deactived"):this.soundToggle.classList.add("settings__sound-button--deactived")}findElements(){this.title=this.appRoot.querySelector(".settings__title"),this.selectLanguageLabel=this.appRoot.querySelector(".settings__language-label"),this.buttons=this.appRoot.querySelectorAll("[data-js-settings-button]"),this.languageSelect=this.appRoot.querySelector("[data-js-settings-language-select]"),this.selectPlayerLabel=this.appRoot.querySelector(".settings__player-label"),this.firstPlayerSelect=this.appRoot.querySelector("[data-js-settings-first-player-select]"),this.aiDifficultySelectLabel=this.appRoot.querySelector(".settings__ai-difficulty-label"),this.aiDifficultySelect=this.appRoot.querySelector("[data-js-settings-ai-difficulty-select]"),this.soundToggle=this.appRoot.querySelector("[data-js-settings-sound-toggle]")}setEventListeners(){this.buttons.forEach((t=>{t.addEventListener("click",this.handleButtonClick)})),this.languageSelect.addEventListener("change",this.handleChangeLanguage),this.firstPlayerSelect.addEventListener("change",this.handleChangeFirstPlayer),this.aiDifficultySelect.addEventListener("change",this.handleChangeAiDifficulty),this.soundToggle.addEventListener("click",this.handleToggleSound)}handleButtonClick=t=>{const e=t.currentTarget.id;this.controller.buttonAction(e)};handleChangeLanguage=t=>{const e=t.target.value;this.controller.changeLanguage(e)};handleChangeFirstPlayer=t=>{const e=t.target.value;this.controller.changeFirstPlayer(e)};handleChangeAiDifficulty=t=>{const e=t.target.value;this.controller.changeAiDifficulty(e)};handleToggleSound=()=>{this.controller.toggleSound()};cleanup(){this.appRoot.innerHTML=""}},y=class{constructor(t){this.model=new g,this.view=new p(t,this),this.hash="settings",this.observers=[],this.model.subscribe(this.handleModelUpdate)}subscribe(t){this.observers.push(t)}show(t){this.view.render(this.model.getState()),this.previousHash=t}getSettings(){return this.model.getState()}handleModelUpdate=t=>{this.view.updateSettingsView(t),this.notifyAppController(t)};notifyAppController(t){this.observers.forEach((e=>e(t)))}buttonAction(t){"backButton"===t&&(window.location.hash=this.previousHash||"home")}changeLanguage(t){this.model.setLanguage(t)}changeFirstPlayer(t){this.model.setFirstPlayer(t)}changeAiDifficulty(t){this.model.setAiDifficulty(t)}toggleSound(){this.model.toggleSound()}cleanup(){this.view&&this.view.cleanup()}},f=class{appRoot;homeController;gameController;settingsController;currentController;newHash;previousHash;constructor(){if(this.appRoot=document.getElementById("app-root"),!this.appRoot)throw new Error("AppController Error: Root element #app-root not found.");this.settingsController=new y(this.appRoot),this.gameController=new d(this.appRoot),this.homeController=new a(this.appRoot),this.settingsController.subscribe(this.throwSettings.bind(this)),window.addEventListener("hashchange",this.handleHashChange.bind(this)),this.throwSettings(this.settingsController.getSettings()),this.handleHashChange()}throwSettings(t){this.gameController.setSettings(t),this.homeController.setSettings(t)}handleHashChange(){let t;switch(this.previousHash=this.newHash||"home",this.newHash=window.location.hash.slice(1),this.currentController&&"function"==typeof this.currentController.cleanup&&"settings"!==this.newHash&&(this.currentController.cleanup(),console.log(`Cleaning up controller: ${this.currentController.constructor.name}`)),this.newHash){case"game":t=this.gameController,this.gameType="player";break;case"game?type=ai":t=this.gameController,this.gameType="ai";break;case"settings":t=this.settingsController;break;default:t=this.homeController}t&&t.show?(t.show(this.previousHash,this.gameType),this.currentController=t):console.warn(`AppController Error: No controller found for hash: ${this.newHash}. Defaulting to home view.`)}};document.addEventListener("DOMContentLoaded",(()=>{new f}))},377:(t,e,s)=>{t.exports=s.p+"assets/svg/settings.a0edd60c18d7b47639ee.svg"}},t=>{t.O(0,[869],(()=>t(t.s=268))),t.O()}]);