"use strict";(self.webpackChunktic_tac_toe=self.webpackChunktic_tac_toe||[]).push([[792],{377:(t,e,s)=>{t.exports=s.p+"assets/svg/settings.a0edd60c18d7b47639ee.svg"},565:(t,e,s)=>{s(917);const n=class{template;appRoot;buttons;controller;constructor(t,e){this.template='<div class="home-menu"> <h1 class="home-menu__title">Tic Tac Toe</h1> <nav class="home-menu__nav"> <button class="home-menu__button" id="playButton" data-js-home-button> <span class="home-menu__button-text">Play 1 vs 1</span> </button> <button class="home-menu__button" id="settingsButton" data-js-home-button> <span class="home-menu__button-text">Settings</span> </button> </nav> </div> ',this.appRoot=t,this.controller=e}render(){this.appRoot.innerHTML=this.template,this.bindEvents()}bindEvents(){this.buttons=this.appRoot.querySelectorAll("[data-js-home-button]"),this.buttons.forEach((t=>{t.addEventListener("click",this.handleButtonClick)}))}handleButtonClick=t=>{const e=t.currentTarget.id;this.controller.navigateTo(e)};cleanup(){this.buttons&&this.buttons.length>0&&this.buttons.forEach((t=>{t.removeEventListener("click",this.handleButtonClick)})),this.buttons=null,console.log("HomeView event listeners cleaned up.")}},i=class{view;constructor(t){this.view=new n(t,this)}show(){this.view.render()}navigateTo(t){switch(t){case"playButton":window.location.hash="game";break;case"settingsButton":window.location.hash="settings";break;default:return void console.warn(`Unknown button clicked: ${t}`)}}cleanup(){this.view&&this.view.cleanup()}},a=class{board;turn;status="undefined";winner={name:null,winnerCells:[]};player1="x";player2="o";observers=[];constructor(){this.resetBoard()}subscribe(t){this.observers.push(t)}notifyUpdate(){const t=this.getState();this.observers.forEach((e=>e(t)))}getState(){return{board:[...this.board],turn:this.turn,status:this.status,winner:this.winner}}resetBoard(){this.board=Array(9).fill(null),this.turn=this.player1,this.winner={name:null,winnerCells:[]},this.changeStatus("undefined"),this.notifyUpdate()}setCell(t){null===this.board[t]&&(this.board[t]=this.turn,this.checkWin())}checkWin(){if(this.isWin())return this.changeStatus("finished"),void this.notifyUpdate();this.changeStatus("active"),this.changeTurn(),this.notifyUpdate()}changeTurn(){this.turn=this.turn===this.player1?this.player2:this.player1}changeStatus(t){this.status=t}isWin(){const t=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];for(const e of t){const[t,s,n]=e;if(this.board[t]&&this.board[t]===this.board[s]&&this.board[t]===this.board[n])return this.winner={name:this.turn,winnerCells:[t,s,n]},this.changeStatus("finished"),!0}}},o='<div class="game"> <h1 class="game__title">Game field</h1> <div class="game__current-player"> Current Player: <span class="game__current-player-name">X</span> </div> <button class="game__settings-button" id="settingsButton" data-js-game-button> <svg> <use class="game__settings-icon" href="'+new URL(s(377),s.b)+'#settings-icon"></use> </svg> </button> <div class="game__win-line" data-js-game-win-line></div> <div class="game__board"> <div class="game__cell" data-js-game-cell="0"></div> <div class="game__cell" data-js-game-cell="1"></div> <div class="game__cell" data-js-game-cell="2"></div> <div class="game__cell" data-js-game-cell="3"></div> <div class="game__cell" data-js-game-cell="4"></div> <div class="game__cell" data-js-game-cell="5"></div> <div class="game__cell" data-js-game-cell="6"></div> <div class="game__cell" data-js-game-cell="7"></div> <div class="game__cell" data-js-game-cell="8"></div> <div class="game__board-line game__board-line--v1" data-js-board-line="1"></div> <div class="game__board-line game__board-line--v2" data-js-board-line="2"></div> <div class="game__board-line game__board-line--h1" data-js-board-line="3"></div> <div class="game__board-line game__board-line--h2" data-js-board-line="4"></div> </div> <div class="game__button-container"> <button class="game__restart-button button" id="restartButton" data-js-game-button> Restart </button> <button class="game__back-button button" id="backButton" data-js-game-button> Back </button> </div> <dialog class="game__dialog dialog" data-js-game-dialog> <div class="dialog__content"> <p class="dialog__game-winner"> Player <span class="dialog__player-name" data-js-dialog-winner></span> has won! </p> <button class="dialog__close-button button" id="dialogCloseButton" data-js-game-button> Close </button> </div> </dialog> <svg> <defs> <filter id="pencil-sketch-filter"> <feturbulence type="fractalNoise" baseFrequency="0.03" numOctaves="3" result="noise"/> <fedisplacementmap in="SourceGraphic" in2="noise" scale="5" xChannelSelector="R" yChannelSelector="G"/> <fegaussianblur stdDeviation="0.5"/> <fecolormatrix type="matrix" values="1 0 0 0 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t 0 1 0 0 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t 0 0 1 0 0\n\t\t\t\t\t\t\t\t\t\t\t\t\t 0 0 0 5 -2"/> </filter> </defs> </svg> </div> ',l=class{crossIcon='<svg class="cross-svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">\n\t<line id="cross-line1" x1="20" y1="20" x2="80" y2="80" stroke="currentcolor" stroke-width="8"\n\t\tstroke-linecap="round" />\n\t<line id="cross-line2" x1="80" y1="20" x2="20" y2="80" stroke="currentcolor" stroke-width="8"\n\t\tstroke-linecap="round" />\n</svg>';circleIcon='<svg class="circle-svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">\n\t<circle id="circle" cx="50" cy="50" r="40" fill="none" stroke="currentcolor" stroke-width="8" />\n</svg>';template=o;appRoot;controller;buttons;cells=[];currentPlayerElem;winBoardLine;winnerElem;winnerDialogElem;dialogCloseButtonElem;status="undefined";constructor(t,e){this.appRoot=t,this.controller=e}render(t){console.log("state from model: ",t),"undefined"===t.status&&(this.appRoot.innerHTML=this.template,this.findElements(),this.setListeners(),this.setBoardLines()),this.setViewState(t)}findElements(){this.currentPlayerElem=this.appRoot.querySelector(".game__current-player-name"),this.cells=this.appRoot.querySelectorAll("[data-js-game-cell]"),this.buttons=this.appRoot.querySelectorAll("[data-js-game-button]"),this.winBoardLine=this.appRoot.querySelector("[data-js-game-win-line]"),this.winnerDialogElem=this.appRoot.querySelector("[data-js-game-dialog]"),this.winnerElem=this.winnerDialogElem.querySelector("[data-js-dialog-winner]"),this.dialogCloseButtonElem=this.winnerDialogElem.querySelector("#dialogCloseButton"),console.log("buttons: ",this.buttons)}setListeners(){this.buttons.forEach((t=>{t.addEventListener("click",this.handleButtonClick)})),this.cells.forEach((t=>{t.addEventListener("click",this.handleCellClick)}))}setBoardLines(){const t=this.appRoot.querySelector(".game__board");for(let e=1;e<=4;e++)t.style.setProperty(`--random-angle-${e}`,`${Math.floor(11*Math.random())+-5}deg`)}handleButtonClick=t=>{const e=t.currentTarget.id;this.controller.buttonAction(e)};handleCellClick=t=>{if("finished"===this.status)return;const e=Number(t.currentTarget.dataset.jsGameCell);this.controller.makeMove(e)};setViewState(t){this.setStatus(t),this.setCells(t),this.setCurrentPlayer(t)}setStatus(t){this.status=t.status,"finished"===this.status&&(this.showWinDialog(t.winner),this.drawWinLine(t.winner.winnerCells,t.winner.name))}setCells(t){this.cells.forEach(((e,s)=>{e.innerHTML||("x"===t.board[s]?(e.innerHTML=this.crossIcon,this.setRandomCellTranslate(e)):"o"===t.board[s]&&(e.innerHTML=this.circleIcon,this.setRandomCellTranslate(e)))}))}setCurrentPlayer(t){"x"===t.turn?(this.currentPlayerElem.innerHTML=this.crossIcon,this.currentPlayerElem.style.setProperty("--color","red")):(this.currentPlayerElem.innerHTML=this.circleIcon,this.currentPlayerElem.style.setProperty("--color","blue"))}showWinDialog(t){this.updateWinDialog(t.name),this.winBoardLine.addEventListener("animationend",(()=>{this.winnerDialogElem.showModal(),this.dialogCloseButtonElem.focus()}),{once:!0})}hideDialog(){this.winnerDialogElem.close()}updateWinDialog(t){"finished"===this.status&&("x"===t?(this.winnerDialogElem.style.setProperty("--background-color","rgb(251, 198, 198)"),this.winnerElem.innerHTML=this.crossIcon,this.winnerElem.style.setProperty("--color","red")):(this.winnerElem.innerHTML=this.circleIcon,this.winnerElem.style.setProperty("--color","blue"),this.winnerDialogElem.style.setProperty("--background-color","rgb(199, 199, 249)")))}drawWinLine(t,e){const s=this.cells[t[0]].getBoundingClientRect(),n=this.cells[t[2]].getBoundingClientRect(),i={x1:s.x,y1:s.y+s.height/2,x2:n.x+n.width,y2:n.y+n.height/2},a={x1:s.x+s.width/2,y1:s.y,x2:n.x+n.width/2,y2:n.y+n.height},o={x1:s.x,y1:s.y,x2:n.x+n.width,y2:n.y+n.height},l={x1:s.x+s.width,y1:s.y,x2:n.x,y2:n.y+n.height},r={horizontal:s.y===n.y,vertical:s.x===n.x,diagonal1:n.x-s.x>0&&n.y-s.y>0,diagonal2:n.x-s.x<0&&n.y-s.y>0},h=Object.keys(r).find((t=>!0===r[t]));switch(h){case"horizontal":this.setWinLine(i,e);break;case"vertical":this.setWinLine(a,e);break;case"diagonal1":this.setWinLine(o,e);break;case"diagonal2":this.setWinLine(l,e);break;default:console.error("Unknown win type:",h)}}setWinLine(t,e){const s=t.x2-t.x1,n=t.y2-t.y1,i=Math.atan2(n,s)*(180/Math.PI),a=Math.sqrt(s*s+n*n),o="x"===e?"red":"blue";this.winBoardLine.style.setProperty("--left-indent",t.x1+"px"),this.winBoardLine.style.setProperty("--top-indent",t.y1+"px"),this.winBoardLine.style.setProperty("--line-length",a+"px"),this.winBoardLine.style.setProperty("--angle",i+"deg"),this.winBoardLine.style.setProperty("--color",o),this.winBoardLine.classList.add("game__win-line--active")}setRandomCellTranslate(t){t.querySelector("svg").style.transform=`translate(${30*Math.random()-15}px, ${30*Math.random()-15}px)`}cleanup(){this.buttons&&this.buttons.length>0&&this.buttons.forEach((t=>{t.removeEventListener("click",this.handleButtonClick)})),this.buttons=null,this.cells=[],this.currentPlayerElem=null,this.winnerElem=null,this.winBoardLine=null,this.status="undefined",this.winnerDialogElem=null,this.dialogCloseButtonElem=null,console.log("GameView event listeners cleaned up.")}},r=class{model;view;constructor(t){this.model=new a,this.view=new l(t,this),this.model.subscribe(this.handleModelUpdate)}show(){this.view.render(this.model.getState())}handleModelUpdate=t=>{this.view.render(t)};buttonAction(t){switch(t){case"restartButton":this.view.cleanup(),this.model.resetBoard();break;case"backButton":window.location.hash="home",this.model.resetBoard();break;case"dialogCloseButton":this.view.hideDialog();break;case"settingsButton":window.location.hash="settings";break;default:return void console.warn(`Unknown button clicked: ${t}`)}}makeMove(t){this.model.setCell(t)}cleanup(){this.view&&this.view.cleanup()}},h=class{appRoot;homeController;gameController;settingsController;currentController;constructor(){if(this.appRoot=document.getElementById("app-root"),!this.appRoot)throw new Error("AppController Error: Root element #app-root not found.");this.homeController=new i(this.appRoot),this.gameController=new r(this.appRoot),window.addEventListener("hashchange",this.handleHashChange.bind(this)),this.handleHashChange()}handleHashChange(){const t=window.location.hash.slice(1);let e;switch(this.currentController&&"function"==typeof this.currentController.cleanup&&this.currentController.cleanup(),t){case"game":e=this.gameController;break;case"settings":e=this.settingsController;break;default:e=this.homeController}e&&e.show?(e.show(),this.currentController=e):(console.warn(`AppController Error: No controller found for hash: ${t}. Defaulting to home view.`),this.homeController.show(),this.currentController=this.homeController)}};document.addEventListener("DOMContentLoaded",(()=>{new h}))}},t=>{t.O(0,[869],(()=>t(t.s=565))),t.O()}]);